import type PostgresInstance from "./src/utils/postgres-instance.js"

export interface PostgresInstanceOptions {
    /** 
     * The location where the data should be persisted to. Defaults to: `./data/db` 
     */
    databaseDir: string
    /** 
     * Whether to overwrite the databaseDir if it exist.
     * Defaults to `false`. 
     */
    overwriteDatabaseDir: boolean
    /** 
     * The port where the Postgres database should be listening. Defaults to
     *  a random port
     */
    port: number
    /** 
     * The username for logging into the Postgres database. Defaults to `postgres` 
     */
    user: string
    /** 
     * The password for logging into the Postgres database. Defaults to `password` 
     */
    password: string
    /** 
     * Pass any additional flags to the initdb process. You can find all
     * available flags here:
     * https://www.postgresql.org/docs/current/app-initdb.html. Flags should be
     * passed as a string array, e.g. `["--debug"]` or `["--locale=en-GB"]` 
     * 
     * Defaults to `[]` 
     */
    initdbFlags: string[]
    /** 
     * Pass any additional flags to the postgres process. You can find all
     * available flags here:
     * https://www.postgresql.org/docs/current/app-postgres.html. Flags should
     * be passed as a string array, e.g. `["--debug"]` or `["--locale=en-GB"]`.
     * 
     * Defaults to `[]`.  
     */
    postgresFlags: string[]
    /**
     * Postgres does not allow binaries to be run by root. In case you're
     * running in root-only environments, such as Docker containers, you may need
     * to create an extra user on your system in order to be able to call the binaries.
     * 
     * NOTE: This WILL irreversibly modify your host system. The effects are
     * somewhat minor, but it's still recommend to only use this in Docker containers.
     * 
     * Defaults to `false`.
     */
    createPostgresUser: boolean
    /** 
     * Whether all data should be left in place when the database is shut down.
     * Defaults to `true`. 
     */
    persistent: boolean
    /** 
     * Pass in a custom logging handler. This will relay and console messages
     * that are generated by the postgres and initdb processes. Defaults to
     * `console.log` 
     */
    onLog: (message: string) => void
    /** 
     * Pass in a custom error logging handler. This will catch and stderr
     * results coming in from the postgres and initdb processes. Defaults to
     * `console.error` 
     */
    onError: (messageOrError: string | Error | unknown) => void

}

export interface PostgresObject {
    /**
     * Create a postgres instance.
     * @param id instance id. It should be unique.
     * @param options instance configuration options.
     */
    create(id?: string | null, options?: Partial<PostgresInstanceOptions> | null): Promise<PostgresInstance>;
    /**
     * Get a postgres instance.
     * @param id instance id.
     */
    get(id: string): PostgresInstance | undefined;
    /**
     * Delete a postgres instance.
     * @param id instance id.
     */
    delete(id: string): void;
    /**
     * Check if a postgres instance exist.
     * @param id instance id.
     */
    has(id: string): boolean;
    /**
     * Clear all postgres instances exist.
     */
    clear(): void;
    /**
     * Get all the postgres instances id.
     */
    ids(): string[];
    /**
     * Loop through all the postgres instances.
     */
    forEach(cb: (instance: PostgresInstance, id: string, postgres: PostgresObject) => void): void;
    /**
     * Get all the postgres instances.
     */
    instances(): PostgresInstance[];
    /**
     * Stop a postgres instance.
     * @param id instance id.
     */
    stop(id: string): Promise<void>;
    /**
     * Stop all postgres instances.
     */
    stopAll(): Promise<void>;
};